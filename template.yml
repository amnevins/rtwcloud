AWSTemplateFormatVersion: 2010-09-09
Parameters:

  AssetsS3Bucket:
    Type: String

  UserAssetsS3Bucket:
    Type: String

  LambdaFolder:
    Description: Folder that contains Backend Lambda code
    MaxLength: 60
    MinLength: 5
    Type: String

Resources:

# AWS::IAM::Role = Any IAM roles can be attached to AWS entities.  It allows stuff we create in AWS
# priviledges and boundries of what they are allowed to do.  So we have can scope these
# down as much as we want, or give our resources as much privileges as well.
# mostly security stuff but also super annoying because stuff wont work alot of times
# its the IAM priviledges to blame.
  # This is the old Role name...
  # RecursiveThinkingLambdaRole:
  RTWIAMRoleLambda:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
      RoleName: "RTW_IAMRoleLambda"
      
  # These define the IAM roles, applied to lambdas, which restrict what certain API methods can do
  RTWIAMRoleLambdaForDynamoScanAndGetItem:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "DynamoDBPolicy_ScanAndGetItem"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt RecursiveThinkingUsers.Arn
                  - !GetAtt RecursiveThinkingLessons.Arn
                  - !GetAtt RecursiveThinkingInterviewQuestions.Arn
                  - !GetAtt RecursiveThinkingInterviewQuestionsAnswers.Arn
                  - !GetAtt RecursiveThinkingProfileSkills.Arn
                  - !GetAtt RecursiveThinkingHomeScreenQuotes.Arn
                  - !GetAtt RecursiveThinkingRanks.Arn
      RoleName: "RTW_IAMRoleLambda_DynamoScanAndGetItem"
      
  RTWIAMRoleLambdaForDynamoPostItem:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "DynamoDBPolicy_PostItem"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - dynamodb:PutItem
                Resource: 
                  - !GetAtt RecursiveThinkingUsers.Arn
                  - !GetAtt RecursiveThinkingLessons.Arn
                  - !GetAtt RecursiveThinkingInterviewQuestions.Arn
                  - !GetAtt RecursiveThinkingInterviewQuestionsAnswers.Arn
                  - !GetAtt RecursiveThinkingProfileSkills.Arn
                  - !GetAtt RecursiveThinkingHomeScreenQuotes.Arn
                  - !GetAtt RecursiveThinkingRanks.Arn
      RoleName: "RTW_IAMRoleLambda_DynamoPostItem"
      
  RTWIAMRoleLambdaForDynamoDeleteItem:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "DynamoDBPolicy_DeleteItem"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - dynamodb:DeleteItem
                Resource: 
                  - !GetAtt RecursiveThinkingUsers.Arn
                  - !GetAtt RecursiveThinkingLessons.Arn
                  - !GetAtt RecursiveThinkingInterviewQuestions.Arn
                  - !GetAtt RecursiveThinkingInterviewQuestionsAnswers.Arn
                  - !GetAtt RecursiveThinkingProfileSkills.Arn
                  - !GetAtt RecursiveThinkingHomeScreenQuotes.Arn
                  - !GetAtt RecursiveThinkingRanks.Arn
      RoleName: "RTW_IAMRoleLambda_DynamoDeleteItem"


# DynamoDBManagedPolicyDeleteItem:
#   Type: AWS::IAM::ManagedPolicy
#   Properties:
#     Description: "Policy for deleting entries in a database"
#     # Path: ?
#     PolicyDocument:
#       Version: "2012-10-17"
#       Statement:
#         -
#           Effect: "Allow"
#           Action: "logs:CreateLogGroup"
#           Resource:
#             Fn::Join:
#             - ""
#             - 
#               - "arn:aws:logs:"
#               - 
#                 Ref: "AWS::Region"
#               - ":"
#               -
#                 Ref: "AWS::AccountId"
#               - ":*"
#         -
#           Effect: "Allow"
#           Action: 
#           - 
#             "logs:CreateLogStream"
#             "logs:CreateLogGroup"
#           Resource:
#             Fn::Join:
#             - ""
#             - 
#               - "arn:aws:logs:"
#               - 
#                 Ref: "AWS::Region"
#               - ":"
#               -
#                 Ref: "AWS::AccountId"
#               - ":log-group:/aws/lambda/*"


# AWSLambdaBasicExecutionManagedPolicyLogLambdaInCloudWatch:
#   Type: AWS::IAM::ManagedPolicy
#   Properties:
#     Description: "Policy for logging Lambda results in CloudWatch"
#     # Path: ?
#     PolicyDocument:
#       Version:"2012-10-17"

# AWS::Cognito::UserPool = Heres our Cognito User Pool!  We can set all the properties
# to configure how we store/verify users.  This will essentially be our AUTH.
# it doesn't need to store user data just their email/password so we can Auth them
# to use our service.

  RecursiveThinkingUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: Welcome! Verify your Recursive Thinking email! {####}
      EmailVerificationSubject: Verification of Recursive Thinking profile
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
      UserPoolName: RecursiveThinkingUserPool
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: false
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
        
          
# Name === UserName
# Given Name === FullName
# Email === Email

# AWS::Cognito::UserPoolClient = This is essentially our Web App which is a client
# of our user pool.  We can define the refresh token validity and thats about it.
# We need the ID of this client to connect to our user pool (see outputs section at bottom).
  
  RecursiveThinkingUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: RTW
      GenerateSecret: False
      RefreshTokenValidity: 30
      UserPoolId: !Ref RecursiveThinkingUserPool

  # Creates the Federated Identity Pool - 
  # This is used specifically to allow users to upload to s3
  
  RecursiveThinkingIdentityPoolS3Test:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: "RecursiveThinkingIdentityPoolS3Test"
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref RecursiveThinkingUserPoolClient
          ProviderName: !GetAtt RecursiveThinkingUserPool.ProviderName

  # Rosetta Stone for Identity Pool
  # Script                      |  UI
  # ==============================================================
  # CognitoIdentityProviders    |  Authentication Providers

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref RecursiveThinkingIdentityPoolS3Test
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "s3:*"
                Resource: 
                  - "*"
                  - !Join [ "", [ "arn:aws:s3:::", !Ref UserAssetsS3Bucket, "/*"] ]


  # Rosetta Stone for Identity Pool - IAM Role - Unauth/Auth
  # Script                      |  UI
  # ==============================================================
  # AssumeRolePolicyDocument    |  Trust Relationships
  # Policies:                   |  Permissions:
  
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref RecursiveThinkingIdentityPoolS3Test
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              
  # Assigns the roles to the Identity Pool
  
  RecursiveThinkingIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref RecursiveThinkingIdentityPoolS3Test
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

########

# AWS::ApiGateway::RestApi = heres our base api.  This needs resources and methods to work.
  RecursiveThinkingAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "RecursiveThinkingAPI"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

# The two lines above are problematic:  RecursiveThinkingAPIStageProd and RecursiveThinkingAPIDeployment

# AWS::ApiGateway::Resource = The resources we define for our API.  These are equivelant
# to the URL path we make the request to. e.g. BASEAPIURL.com/resourcepath where
# resourcepath is more like /developers/{id} or something.

# An error occurred (ValidationError) when calling the UpdateStack operation: Template error: if specifying one argument to Fn::GetAtt, that argument must be a non-empty string in format <LogicalId>.<Attribute>

# ROOT
# RecursiveThinkingAPIResourceDevelopers:
#     Type: "AWS::ApiGateway::Resource"
#     Properties:
#       ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
#       PathPart: "developers"
#       RestApiId: !Ref RecursiveThinkingAPI
# REFERENCE ROOT
# RecursiveThinkingAPIResourceDeveloperById:
#     Type: "AWS::ApiGateway::Resource"
#     Properties:
#       ParentId: !Ref RecursiveThinkingAPIResourceDevelopers <---HERE THIS IS MOST LIKELY A !GetAtt
#       PathPart: "{id}"
#       RestApiId: !Ref RecursiveThinkingAPI

# An error occurred (ValidationError) when calling the UpdateStack operation: Template format error: Unresolved resource dependencies [RecursiveThinkingAPIResourceLessonIdEdit] in the Resources block of the template

# Usually the Gateway Resource is Named Incorrectly

# ================================================================
# /users/
# ================================================================
  RecursiveThinkingAPIResourceUsers:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "users"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /users/{id}
# ================================================================
  RecursiveThinkingAPIResourceUserById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceUsers
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI

# ================================================================
# /lessons/
# ================================================================
  RecursiveThinkingAPIResourceLessons:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "lessons"
      RestApiId: !Ref RecursiveThinkingAPI

# ================================================================
# /lessons/{id}
# ================================================================
  RecursiveThinkingAPIResourceLessonById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceLessons
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI

# ================================================================
# /interviewquestions/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestions:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "interviewquestions"
      RestApiId: !Ref RecursiveThinkingAPI
      
# ================================================================
# /interviewQuestions/{id}/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestions
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI
      
# ================================================================
# /interviewquestionsanswers/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsAnswers:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "interviewquestionsanswers"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewquestionsanswers/{id}
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsAnswerById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestionsAnswers
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI

# ================================================================
# /skills/ - Profile Skills
# ================================================================
  RecursiveThinkingAPIResourceSkills:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "skills"
      RestApiId: !Ref RecursiveThinkingAPI
      
# ================================================================
# /skills/{id} - Profile Skills
# ================================================================
  RecursiveThinkingAPIResourceSkillById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceSkills
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI
      
# ================================================================
# /homescreenquotes/ - HomeScreen Quotes
# ================================================================
  RecursiveThinkingAPIResourceHomeScreenQuotes:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "homescreenquotes"
      RestApiId: !Ref RecursiveThinkingAPI

# AWS::ApiGateway::Method = The HTTP Method that gets attached to a API Gateway Resource.
# Could be GET, POST, PUT, DELETE ... etc.  We define that the method will be a proxy,
# meaning it will route all requests to a Lambda for processing.  We also define to use
# our Cognito Authorizer to determine if the request is ok to proceed.

# METHODOLOGY
# ================================================================
# RecursiveThinkingAPIResource + /PATH/ + "METHOD" + Method:
# RecursiveThinkingAPIResource + Lessons + GET + Method:
# ================================================================

# ================================================================

# An error occurred (ValidationError) when calling the UpdateStack operation: Template format error: Unresolved resource dependencies [RecursiveThinkingAPIResourceLessonIdEdit] in the Resources block of the template

# Check Name here - and compare to above

# ResourceId: !Ref RecursiveThinkingAPIResourceLessonByIdEdit

# ================================================================

# ================================================================
# GET (ALL) - /users/
# ================================================================
  RecursiveThinkingAPIResourceUsersGet:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceUsers
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWUsersGetAll.Arn}/invocations

# ================================================================
# POST - /users/
# ================================================================
  RecursiveThinkingAPIResourceUsersPost:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"      
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceUsers
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWUsersPost.Arn}/invocations
  
  RecursiveThinkingAPIResourceUsersCORSGetAndPostOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceUsers
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# GET - /users/{id}
# ================================================================
  RecursiveThinkingAPIResourceUsersGetUserById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceUserById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWUserGetById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

# ================================================================
# DELETE - /users/{id}
# ================================================================
  RecursiveThinkingAPIResourceUsersDeleteUserById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "DELETE"
      ResourceId: !Ref RecursiveThinkingAPIResourceUserById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWUserDeleteById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

# ================================================================
# PUT - /users/{id}
# ================================================================
  RecursiveThinkingAPIResourceUsersPutUserById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "PUT"
      ResourceId: !Ref RecursiveThinkingAPIResourceUserById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWUserPutById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

  RecursiveThinkingAPIResourceUsersUserByIdCORSGetDeletePutOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceUserById
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# GET - /lessons/
# ================================================================
  RecursiveThinkingAPIResourceLessonsGet:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessons
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWLessonsGetAll.Arn}/invocations

# ================================================================
# POST - /lessons/
# ================================================================
  RecursiveThinkingAPIResourceLessonsPost:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"      
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessons
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWLessonsPost.Arn}/invocations
  
  RecursiveThinkingAPIResourceLessonsCORSGetAndPostOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceLessons
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  
# ================================================================
# GET - /lessons/{id}
# ================================================================
  RecursiveThinkingAPIResourceLessonsGetLessonById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWLessonGetById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

# ================================================================
# DELETE - /lessons/{id}
# ================================================================
  RecursiveThinkingAPIResourceLessonsDeleteLessonById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "DELETE"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWLessonDeleteById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

# ================================================================
# PUT - /lessons/{id}
# ================================================================
  RecursiveThinkingAPIResourceLessonsPutLessonById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "PUT"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWLessonPutById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'
        
  RecursiveThinkingAPIResourceLessonsLessonByIdCORSGetDeletePutOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceLessonById
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# GET - /interviewQuestions/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsGet:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestions
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWInterviewQuestionsGetAll.Arn}/invocations
          
# ================================================================
# POST - /interviewQuestions/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsPost:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"      
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestions
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWInterviewQuestionsPost.Arn}/invocations
          
  RecursiveThinkingAPIResourceInterviewQuestionsCORSGetAndPostOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceInterviewQuestions
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# GET - /interviewQuestions/{id}
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsGetInterviewQuestionById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWInterviewQuestionGetById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

# ================================================================
# DELETE - /interviewQuestions/{id}
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsDeleteInterviewQuestionById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "DELETE"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWInterviewQuestionDeleteById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'

# ================================================================
# PUT - /interviewQuestions/{id}
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsPutInterviewQuestionById:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "PUT"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
      RestApiId: !Ref RecursiveThinkingAPI
      # RequestParameters:
        # method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWInterviewQuestionPutById.Arn}/invocations
        # CacheKeyParameters:
        #   - 'method.request.path.id'
        # RequestParameters:
          # integration.request.path.id: 'method.request.path.id'
        
  RecursiveThinkingAPIResourceInterviewQuestionsInterviewQuestionByIdCORSGetDeletePutOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceInterviewQuestionById
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# GET - /interviewquestionsanswers/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsAnswersGet:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionsAnswers
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWInterviewQuestionsAnswersGetAll.Arn}/invocations
        
  RecursiveThinkingAPIResourceInterviewQuestionsAnswersGetCORSOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceInterviewQuestionsAnswers
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# GET - /skills/
# ================================================================
  RecursiveThinkingAPIResourceSkillsGet:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceSkills
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWSkillsGetAll.Arn}/invocations

  RecursiveThinkingAPIResourceSkillsGetCORSOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceSkills
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# ================================================================
# POST - /skills/
# ================================================================
  # RecursiveThinkingAPIResourceSkillsMethodPost:
  #   Type: "AWS::ApiGateway::Method"
  #   # DependsOn: RecursiveThinkingAuthorizer
  #   Properties:
  #     # ApiKeyRequired: False
  #     AuthorizationType: "NONE"
  #     # AuthorizationType: "COGNITO_USER_POOLS"
  #     # AuthorizerId: !Ref RecursiveThinkingAuthorizer
  #     HttpMethod: "POST"
  #     ResourceId: !Ref RecursiveThinkingAPIResourceSkills
  #     RestApiId: !Ref RecursiveThinkingAPI
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostSkills.Arn}/invocations

# ================================================================
# GET - /homescreenquotes/
# ================================================================
  RecursiveThinkingAPIResourceHomeScreenQuotesGet:
    Type: "AWS::ApiGateway::Method"
    # DependsOn: RecursiveThinkingAuthorizer
    Properties:
      # ApiKeyRequired: False
      AuthorizationType: "NONE"
      # AuthorizationType: "COGNITO_USER_POOLS"
      # AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceHomeScreenQuotes
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWHomeScreenQuotesGetAll.Arn}/invocations

  RecursiveThinkingAPIResourceHomeScreenQuotesGetCORSOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceHomeScreenQuotes
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true

# AWS::ApiGateway::Authorizer = This is our Authorizer on our API's.  In this case its
# configured to look for a valid Cognito IdToken in the Authorization header of the request.
# Our API's will check that IDToken with the specified Cognito User Pool and determine
# whether or not to send the request on to the lambda that will process the request.
# Users get a cookie in their local storage when they sign in with cognito we can use for
# all our API Calls to the backend.
  RecursiveThinkingAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      IdentitySource: "method.request.header.Authorization"
      Name: "RecursiveThinkingCognitoAuthorizer"
      ProviderARNs:
        - !GetAtt RecursiveThinkingUserPool.Arn
      RestApiId: !Ref RecursiveThinkingAPI
      Type: "COGNITO_USER_POOLS"

# AWS::Lambda::Permission = Lambda Functions need this to allow other AWS Services
# to invoke them.  In this case we specify API Gateway as the principal so that our
# functions can be invoked by our API.  We can have as many of these attached to a
# Lambda as we need things to invoke it.
# Action = IAM action ( in this case lambda:* ) meaning anything, we prob just need lambda:Invoke.
# FunctionName = Name of function to attach the permission to.
# Principal = The service that will have permission to invoke the function.

# FROM THE CONSOLE, if you load a Lambda into an Integration Request, you'll get a dialogue like this:
# Add Permission to Lambda Function
# You are about to give API Gateway permission to invoke your Lambda function:
# arn:aws:lambda:us-west-2:918861449844:function:<functionName>

# PREVIOUS PERMISSION LOOKED LIKE THIS (BUT DIDN'T include API GATEWAY as a Trigger)
  # RecursiveThinkingLambdaPermissionUsersGet:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:*
  #     FunctionName: !Ref RTWUsersGetAll
  #     Principal: apigateway.amazonaws.com
  
# Examples below correct this.  Need to work on a way to dynamically get 

# "Condition": {
#     "ArnLike": {
#       "AWS:SourceArn": "arn:aws:execute-api:us-west-2:918861449844:s5iskglt5c/*/GET/users"
#     }
#   }

# ================================================================
# PERMISSION - GET - /users/
# ================================================================
  RecursiveThinkingLambdaPermissionUsersGet:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RTWUsersGetAll
      Action: lambda:*
      # Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      # SourceArn:
      #   Fn::Join:
      #   - ""
      #   - - "arn:aws:execute-api:"
      #     - Ref: "AWS::Region"
      #     - ":"
      #     - Ref: "AWS::AccountId"
      #     - ":"
      #     - Ref: RecursiveThinkingAPI
      #     - "/*/GET/users"
          
          # - "/*/"
          # - Ref: RecursiveThinkingAPIResourceUsersMethodGET.HttpMethod
          # - "/"
          # - Ref: RecursiveThinkingAPIResourceUsers.PathPart
# ================================================================
# PERMISSION - GET - /users/{id}
# ================================================================
  # RecursiveThinkingLambdaGetDeveloperByIdPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:*
  #     FunctionName: !Ref RTWGetDeveloperById
  #     Principal: apigateway.amazonaws.com

# ================================================================
# PERMISSION - GET - /lessons/
# ================================================================
  RecursiveThinkingLambdaPermissionLessonsGet:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RTWLessonsGetAll
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - "arn:aws:execute-api:"
          - Ref: "AWS::Region"
          - ":"
          - Ref: "AWS::AccountId"
          - ":"
          - Ref: RecursiveThinkingAPI
          - "/*/GET/lessons"
# ================================================================
# PERMISSION - GET - /lessons/{id}
# ================================================================
  # RecursiveThinkingLambdaLessonsGetLessonByIdPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:*
  #     FunctionName: !Ref RTWGetLessonById
  #     Principal: apigateway.amazonaws.com

# ================================================================
# PERMISSION - GET - /interviewquestions/
# ================================================================
  RecursiveThinkingLambdaPermissionInterviewQuestionsGet:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RTWInterviewQuestionsGetAll
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - "arn:aws:execute-api:"
          - Ref: "AWS::Region"
          - ":"
          - Ref: "AWS::AccountId"
          - ":"
          - Ref: RecursiveThinkingAPI
          - "/*/GET/interviewquestions"
# ================================================================
# PERMISSION - GET - /interviewquestions/{id}
# ================================================================
  # RecursiveThinkingLambdaInterviewQuestionsGetInterviewQuestionByIDPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:*
  #     FunctionName: !Ref RTWGetInterviewQuestionById
  #     Principal: apigateway.amazonaws.com

# ================================================================
# PERMISSION - GET - /interviewquestionsanswers/
# ================================================================
  RecursiveThinkingLambdaPermissionInterviewQuestionsAnswersGet:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RTWInterviewQuestionsAnswersGetAll
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - "arn:aws:execute-api:"
          - Ref: "AWS::Region"
          - ":"
          - Ref: "AWS::AccountId"
          - ":"
          - Ref: RecursiveThinkingAPI
          - "/*/GET/interviewquestionsanswers"
# ================================================================
# PERMISSION - GET - /skills/
# ================================================================
  RecursiveThinkingLambdaPermissionSkillsGet:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RTWSkillsGetAll
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - "arn:aws:execute-api:"
          - Ref: "AWS::Region"
          - ":"
          - Ref: "AWS::AccountId"
          - ":"
          - Ref: RecursiveThinkingAPI
          - "/*/GET/skills"
      
# ================================================================
# PERMISSION - POST - /skills/
# ================================================================
  # RecursiveThinkingLambdaPostSkillsProfessionalPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:*
  #     FunctionName: !Ref RTWPostSkills
  #     Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /homescreenquotes/
# ================================================================
  RecursiveThinkingLambdaPermissionHomeScreenQuotesGet:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref RTWHomeScreenQuotesGetAll
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - "arn:aws:execute-api:"
          - Ref: "AWS::Region"
          - ":"
          - Ref: "AWS::AccountId"
          - ":"
          - Ref: RecursiveThinkingAPI
          - "/*/GET/homescreenquotes"

# AWS::Lambda::Function = Lambda functions! We point to the AssetsS3Bucket and a zip file equal
# to the functions name, as our code source.  (This all gets created in our Python Script).
# Our functions need the DynamoDB Table name as an environment variable so we DependsOn that.
# The role defined here is a reference to an IAM role the function will assume, it gives
# the function power to do things with other AWS services (such as read/write to DynamoDB)

# ================================================================
# An error occurred (ValidationError) when calling the UpdateStack operation: Template error: instance of Fn::Sub references invalid resource attribute RTWPostLessonByIdEdit.Arn

# Usually this is a name Error in the Lambda

# ================================================================

# ================================================================
# LAMBDA - GET - /users/
# ================================================================
  RTWUsersGetAll:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingUsers
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWUsersGetAll.zip"] ]
      Description: "RTW Users Get All"
      FunctionName: "RTWUsersGetAll"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingUsers
      Handler: index.UsersGetAll
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - POST - /users/
# ================================================================
  RTWUsersPost:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingUsers
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWUsersPost.zip"] ]
      Description: "RTW Users Post"
      FunctionName: "RTWUsersPost"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingUsers
      Handler: index.UsersPost
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn      
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoPostItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - GET - /users/{id}
# ================================================================
  RTWUserGetById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingUsers
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWUserGetById.zip"] ]
      Description: "RTW Get User By Id"
      FunctionName: "RTWUserGetById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingUsers
      Handler: index.UserGetById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn      
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - DELETE - /users/{id}
# ================================================================
  RTWUserDeleteById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingUsers
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWUserDeleteById.zip"] ]
      Description: "RTW Delete User By Id"
      FunctionName: "RTWUserDeleteById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingUsers
      Handler: index.UserDeleteById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoDeleteItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - PUT OR PATCH - /users/{id}
# ================================================================
  RTWUserPutById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingUsers
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWUserPutById.zip"] ]
      Description: "RTW Put User By Id"
      FunctionName: "RTWUserPutById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingUsers
      Handler: index.UserPutById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoPostItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - GET - /lessons/
# ================================================================
  RTWLessonsGetAll:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingLessons
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWLessonsGetAll.zip"] ]
      Description: "RTW Lessons Get All"
      FunctionName: "RTWLessonsGetAll"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingLessons
      Handler: index.LessonsGetAll
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite
          
# ================================================================
# LAMBDA - POST - /lessons
# ================================================================
  RTWLessonsPost:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingLessons
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWLessonsPost.zip"] ]
      Description: "RTW Lessons Post"
      FunctionName: "RTWLessonsPost"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingLessons
      Handler: index.LessonsPost
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoPostItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite
  
# ================================================================
# LAMBDA - GET - /lessons/{id}
# ================================================================
  RTWLessonGetById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingLessons
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWLessonGetById.zip"] ]
      Description: "RTW Get Lesson By Id"
      FunctionName: "RTWLessonGetById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingLessons
      Handler: index.LessonGetById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite
          
# ================================================================
# LAMBDA - DELETE - /lessons/{id}
# ================================================================
  RTWLessonDeleteById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingLessons
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWLessonDeleteById.zip"] ]
      Description: "RTW Delete Lesson By Id"
      FunctionName: "RTWLessonDeleteById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingLessons
      Handler: index.LessonDeleteById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoDeleteItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - PUT OR PATCH - /lessons/{id}
# ================================================================
  RTWLessonPutById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingLessons
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWLessonPutById.zip"] ]
      Description: "RTW Put Lesson By Id"
      FunctionName: "RTWLessonPutById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingLessons
      Handler: index.LessonPutById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoPostItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - GET - /interviewQuestions/
# ================================================================
  RTWInterviewQuestionsGetAll:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWInterviewQuestionsGetAll.zip"] ]
      Description: "RTW Interview Questions Get All"
      FunctionName: "RTWInterviewQuestionsGetAll"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingInterviewQuestions
      Handler: index.InterviewQuestionsGetAll
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - POST - /interviewQuestions
# ================================================================
  RTWInterviewQuestionsPost:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWInterviewQuestionsPost.zip"] ]
      Description: "RTW Interview Questions Post"
      FunctionName: "RTWInterviewQuestionsPost"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingInterviewQuestions
      Handler: index.InterviewQuestionsPost
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoPostItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - GET - /interviewQuestions/{id}
# ================================================================
  RTWInterviewQuestionGetById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWInterviewQuestionGetById.zip"] ]
      Description: "RTW Get Interview Question By Id"
      FunctionName: "RTWInterviewQuestionGetById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingInterviewQuestions
      Handler: index.InterviewQuestionGetById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite
          
# ================================================================
# LAMBDA - DELETE - /interviewQuestions/{id}
# ================================================================
  RTWInterviewQuestionDeleteById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWInterviewQuestionDeleteById.zip"] ]
      Description: "RTW Interview Question By Id"
      FunctionName: "RTWInterviewQuestionDeleteById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingInterviewQuestions
      Handler: index.InterviewQuestionDeleteById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoDeleteItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - PUT OR PATCH - /interviewQuestions/{id}
# ================================================================
  RTWInterviewQuestionPutById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWInterviewQuestionPutById.zip"] ]
      Description: "RTW Put Interview Question By Id"
      FunctionName: "RTWInterviewQuestionPutById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingInterviewQuestions
      Handler: index.InterviewQuestionPutById
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoPostItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - GET - /interviewquestionsanswers/
# ================================================================
  RTWInterviewQuestionsAnswersGetAll:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingInterviewQuestionsAnswers
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWInterviewQuestionsAnswersGetAll.zip"] ]
      Description: "RTW Interview Questions Answers Get All"
      FunctionName: "RTWInterviewQuestionsAnswersGetAll"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingInterviewQuestionsAnswers
      Handler: index.InterviewQuestionsAnswersGetAll
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite

# ================================================================
# LAMBDA - GET - /skills/
# ================================================================
  RTWSkillsGetAll:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingProfileSkills
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWSkillsGetAll.zip"] ]
      Description: "RTW Skills Get All"
      FunctionName: "RTWSkillsGetAll"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingProfileSkills
      Handler: index.SkillsGetAll
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite
# ================================================================
# LAMBDA - POST - /skills/
# ================================================================
  # RTWPostSkillsLanguage:
  #   Type: "AWS::Lambda::Function"
  #   DependsOn: RecursiveThinkingProfileSkillsLanguage
  #   Properties:
  #     Code:
  #       S3Bucket: !Ref AssetsS3Bucket
  #       S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostSkillsLanguage.zip"] ]
  #     Description: "Post RTW Skills Language"
  #     FunctionName: "RTWPostSkillsLanguage"
  #     Environment:
  #       Variables:
  #         TABLE: !Ref RecursiveThinkingProfileSkillsLanguage
  #     Handler: index.PostSkillsLanguage
  #     MemorySize: 128
  #     Role: !GetAtt RTWIAMRoleLambda.Arn
  #     Runtime: nodejs8.10
  #     Timeout: 60

# ================================================================
# LAMBDA - GET - /homescreenquotes/
# ================================================================
  RTWHomeScreenQuotesGetAll:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingHomeScreenQuotes
    Properties:
      Code:
        S3Bucket: !Ref AssetsS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/RTWHomeScreenQuotesGetAll.zip"] ]
      Description: "RTW Home Screen Quotes Get All"
      FunctionName: "RTWHomeScreenQuotesGetAll"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingHomeScreenQuotes
      Handler: index.HomeScreenQuotesGetAll
      MemorySize: 128
      Role: !GetAtt RTWIAMRoleLambda.Arn
      # Role: !GetAtt RTWIAMRoleLambdaForDynamoScanAndGetItem.Arn
      Runtime: nodejs8.10
      Timeout: 8
      Tags:
        -
          Key: project
          Value: RecursiveThinkingWebsite
  
# AWS::DynamoDB::Table = DynamoDB tables.  They must specify at least one primary key.  The primary
# key has to be unique across all records in the table, so we specify type HASH.
# ================================================================
# DYNAMODB - /users/
# ================================================================
  RecursiveThinkingUsers:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingUsers"
# ================================================================
# DYNAMODB - /lessons/
# ================================================================
  RecursiveThinkingLessons:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingLessons"
# ================================================================
# DYNAMODB - /interviewQuestions/
# ================================================================
  RecursiveThinkingInterviewQuestions:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingInterviewQuestions"
# ================================================================
# DYNAMODB - /interviewQuestionsAnswers
# ================================================================
  RecursiveThinkingInterviewQuestionsAnswers:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingInterviewQuestionsAnswers"
# ================================================================
# DYNAMODB - Master Table for UserProfile Skills - Professional
# ================================================================
  RecursiveThinkingProfileSkills:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingProfileSkills"
# ================================================================
# DYNAMODB - Master Table for HomeScreen Quotes
# ================================================================
  RecursiveThinkingHomeScreenQuotes:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingHomeScreenQuotes"
# ================================================================
# DYNAMODB - Master Table for Ranks
# ================================================================
  RecursiveThinkingRanks:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingRanks"
# ================================================================
# S3 Bucket - To Store Resumes and Avatars per user
# ================================================================
  RecursiveThinkingUserAssetsS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties: 
      AccessControl: PublicReadWrite
      BucketName: !Ref UserAssetsS3Bucket
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: 
              - "*"
            AllowedMethods: 
              - HEAD
              - GET
              - POST
              - PUT
              - DELETE
            AllowedHeaders: 
              - "*"
      
# These are our outputs to show after running our python script.  We can paste the
# cognito clientId and cognitoUserPoolId in main.js of our webapp to connect to that
# specific resource with AWS Amplify library (our auth).  We can use the API Gateway ID
# as the base of the URL that we make all our api calls to.
# This allows us to set these values when we want to test on one 'stack' or
# instance of the architecture in this template.  We will have a 'beta' stack
# and a 'prod' stack.  Allows us to change these values in the webapp when we want to
# test things out and not break the 'prod' stack.  Which stack gets built and what is
# output is specified by passing the --stage beta or --stage '' to our Python script.
# for now just dont pass --stage because stuffs not in production yet.
Outputs:

  CognitoUserPoolId:
    Description: userPoolId - The cognito user pool id
    Value: !Ref RecursiveThinkingUserPool
    Export:
      Name: CognitoUserPoolIdentifier

  APIGatewayId:
    Description: apiUrl - The base id of the api, used for constructing the api url to make requests
    Value: !Ref RecursiveThinkingAPI
    Export:
      Name: APIGatewayIdentifier

  CognitoClientId:
    Description: userPoolWebClientId - The id of the client (app) connected to cognito
    Value: !Ref RecursiveThinkingUserPoolClient
    Export:
      Name: CognitoUserPoolClientIdentifier
      
  CognitoIdentityPoolId:
    Description: IdentityPoolId - Export for s3 Bucket
    Value: !Ref RecursiveThinkingIdentityPoolS3Test
    Export:
      Name: "RecursiveThinkingIdentityPoolS3Test::Id"

  s3BucketName:
    Description: s3BucketName - Name of s3 Bucket
    Value: !Ref RecursiveThinkingUserAssetsS3Bucket
    Export:
      Name: "s3BucketName"