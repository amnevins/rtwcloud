AWSTemplateFormatVersion: 2010-09-09
Parameters:

  AssetS3Bucket:
    Type: String

  LambdaFolder:
    Description: Folder that contains Backend Lambda code
    MaxLength: 60
    MinLength: 5
    Type: String

Resources:

# AWS::IAM::Role = Any IAM roles can be attached to AWS entities.  It allows stuff we create in AWS
# priviledges and boundries of what they are allowed to do.  So we have can scope these
# down as much as we want, or give our resources as much privileges as well.
# mostly security stuff but also super annoying because stuff wont work alot of times
# its the IAM priviledges to blame.
  RecursiveThinkingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
      RoleName: "RecursiveThinkingLambdaRole"

# AWS::Cognito::UserPool = Heres our Cognito User Pool!  We can set all the properties
# to configure how we store/verify users.  This will essentially be our AUTH.
# it doesn't need to store user data just their email/password so we can Auth them
# to use our service.
  RecursiveThinkingUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: Welcome! Verify your Recursive Thinking email! {####}
      EmailVerificationSubject: Verification of Recursive Thinking profile
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
      UserPoolName: RecursiveThinkingUserPool
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: false
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
      - Name: given_name
        AttributeDataType: String
        Mutable: false
        Required: true
      # - Name: preferred_username
      #   AttributeDataType: String
      #   Mutable: false
      #   Required: true
        
          
# Name === UserName
# Given Name === FullName
# Email === Email

# AWS::Cognito::UserPoolClient = This is essentially our Web App which is a client
# of our user pool.  We can define the refresh token validity and thats about it.
# We need the ID of this client to connect to our user pool (see outputs section at bottom).
  RecursiveThinkingUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: RTW
      GenerateSecret: False
      RefreshTokenValidity: 30
      UserPoolId: !Ref RecursiveThinkingUserPool


# AWS::ApiGateway::RestApi = heres our base api.  This needs resources and methods to work.
  RecursiveThinkingAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "RecursiveThinkingAPI"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

# The two lines above are problematic:  RecursiveThinkingAPIStageProd and RecursiveThinkingAPIDeployment

# AWS::ApiGateway::Resource = The resources we define for our API.  These are equivelant
# to the URL path we make the request to. e.g. BASEAPIURL.com/resourcepath where
# resourcepath is more like /developers/{id} or something.

# An error occurred (ValidationError) when calling the UpdateStack operation: Template error: if specifying one argument to Fn::GetAtt, that argument must be a non-empty string in format <LogicalId>.<Attribute>

# ROOT
# RecursiveThinkingAPIResourceDevelopers:
#     Type: "AWS::ApiGateway::Resource"
#     Properties:
#       ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
#       PathPart: "developers"
#       RestApiId: !Ref RecursiveThinkingAPI
# REFERENCE ROOT
# RecursiveThinkingAPIResourceDeveloperById:
#     Type: "AWS::ApiGateway::Resource"
#     Properties:
#       ParentId: !Ref RecursiveThinkingAPIResourceDevelopers <---HERE THIS IS MOST LIKELY A !GetAtt
#       PathPart: "{id}"
#       RestApiId: !Ref RecursiveThinkingAPI

# An error occurred (ValidationError) when calling the UpdateStack operation: Template format error: Unresolved resource dependencies [RecursiveThinkingAPIResourceLessonIdEdit] in the Resources block of the template

# Usually the Gateway Resource is Named Incorrectly

# ================================================================
# /developers/
# ================================================================
  RecursiveThinkingAPIResourceDevelopers:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "developers"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /developers/{id}
# ================================================================
  RecursiveThinkingAPIResourceDeveloperById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceDevelopers
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /developers/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceDeveloperByIdEdit:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceDeveloperById
      PathPart: "edit"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /lessons/
# ================================================================
  RecursiveThinkingAPIResourceLessons:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "lessons"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /lessons/{id}
# ================================================================
  RecursiveThinkingAPIResourceLessonById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceLessons
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /lessons/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceLessonByIdEdit:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceLessonById
      PathPart: "edit"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewQuestions/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestions:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RecursiveThinkingAPI.RootResourceId
      PathPart: "interviewQuestions"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewQuestions/{id}/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionById:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestions
      PathPart: "{id}"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewQuestions/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionByIdEdit:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
      PathPart: "edit"
      RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewQuestions/{id}/answers/
# ================================================================
  # RecursiveThinkingAPIResourceInterviewQuestionByIdAnswers:
  #   Type: "AWS::ApiGateway::Resource"
  #   Properties:
  #     ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
  #     PathPart: "answers"
  #     RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewQuestions/{id}/answers/{id}
# ================================================================
  # RecursiveThinkingAPIResourceInterviewQuestionByIdAnswerById:
  #   Type: "AWS::ApiGateway::Resource"
  #   Properties:
  #     ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestionByIdAnswers
  #     PathPart: "{id}"
  #     RestApiId: !Ref RecursiveThinkingAPI
# ================================================================
# /interviewQuestions/{id}/answers/{id}/edit/
# ================================================================
#   RecursiveThinkingAPIResourceInterviewQuestionByIdAnswerByIdEdit:
#     Type: "AWS::ApiGateway::Resource"
#     Properties:
#       ParentId: !Ref RecursiveThinkingAPIResourceInterviewQuestionByIdAnswerById
#       PathPart: "edit"
#       RestApiId: !Ref RecursiveThinkingAPI

# AWS::ApiGateway::Method = The HTTP Method that gets attached to a API Gateway Resource.
# Could be GET, POST, PUT, DELETE ... etc.  We define that the method will be a proxy,
# meaning it will route all requests to a Lambda for processing.  We also define to use
# our Cognito Authorizer to determine if the request is ok to proceed.

# METHODOLOGY
# ================================================================
# RecursiveThinkingAPIResource + /PATH/ + "METHOD" + Method:
# RecursiveThinkingAPIResource + Lessons + GET + Method:
# ================================================================

# ================================================================

# An error occurred (ValidationError) when calling the UpdateStack operation: Template format error: Unresolved resource dependencies [RecursiveThinkingAPIResourceLessonIdEdit] in the Resources block of the template

# Check Name here - and compare to above

# ResourceId: !Ref RecursiveThinkingAPIResourceLessonByIdEdit

# ================================================================

# ================================================================
# GET - /developers/
# ================================================================
  RecursiveThinkingAPIResourceDevelopersGETMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceDevelopers
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetDevelopers.Arn}/invocations
        
  RecursiveThinkingAPIResourceDevelopersGETMethodCORSOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceDevelopers
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        
# ================================================================
# GET - /developers/{id}
# ================================================================
  RecursiveThinkingAPIResourceDevelopersGETDeveloperByIdMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceDeveloperById
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetDeveloperById.Arn}/invocations
# ================================================================
# POST - /developers/{id}
# ================================================================
  RecursiveThinkingAPIResourceDevelopersPOSTDeveloperByIdMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceDeveloperById
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostDeveloperById.Arn}/invocations
# ================================================================
# GET - /developers/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceDevelopersGETDeveloperByIdEditMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceDeveloperByIdEdit
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetDeveloperByIdEdit.Arn}/invocations
# ================================================================
# POST - /developers/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceDevelopersPOSTDeveloperByIdEditMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceDeveloperByIdEdit
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostDeveloperByIdEdit.Arn}/invocations
# ================================================================
# GET - /lessons/
# ================================================================
  RecursiveThinkingAPIResourceLessonsGETMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessons
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetLessons.Arn}/invocations
  RecursiveThinkingAPIResourceLessonsGETMethodCORSOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceLessons
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
# ================================================================
# GET - /lessons/{id}
# ================================================================
  RecursiveThinkingAPIResourceLessonsGETLessonByIdMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonById
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetLessonById.Arn}/invocations
# # ================================================================
# # POST - /lessons/{id}
# # ================================================================
  RecursiveThinkingAPIResourceLessonsPOSTLessonByIdMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonById
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostLessonById.Arn}/invocations
# ================================================================
# GET - /lessons/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceLessonsGETLessonByIdEditMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonByIdEdit
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetLessonByIdEdit.Arn}/invocations
# # ================================================================
# # POST - /lessons/{id}/edit
# # ================================================================
  RecursiveThinkingAPIResourceLessonsPOSTLessonByIdEditMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceLessonByIdEdit
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostLessonByIdEdit.Arn}/invocations
# ================================================================
# GET - /interviewQuestions/
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsGETMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestions
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetInterviewQuestions.Arn}/invocations
        
  RecursiveThinkingAPIResourceInterviewQuestionsGETMethodCORSOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: RecursiveThinkingAPI
      ResourceId:
        Ref: RecursiveThinkingAPIResourceInterviewQuestions
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
# ================================================================
# GET - /interviewQuestions/{id}
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsGETQuestionByIdMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetInterviewQuestionById.Arn}/invocations
# # ================================================================
# # POST - /interviewQuestions/{id}
# # ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsPOSTQuestionByIdMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionById
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostInterviewQuestionById.Arn}/invocations
# ================================================================
# GET - /interviewQuestions/{id}/edit
# ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsGETQuestionByIdEditMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "GET"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionByIdEdit
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWGetInterviewQuestionByIdEdit.Arn}/invocations
# # ================================================================
# # POST - /interviewQuestions/{id}/edit
# # ================================================================
  RecursiveThinkingAPIResourceInterviewQuestionsPOSTQuestionByIdEditMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: RecursiveThinkingAuthorizer
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref RecursiveThinkingAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref RecursiveThinkingAPIResourceInterviewQuestionByIdEdit
      RestApiId: !Ref RecursiveThinkingAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RTWPostInterviewQuestionByIdEdit.Arn}/invocations

# AWS::ApiGateway::Authorizer = This is our Authorizer on our API's.  In this case its
# configured to look for a valid Cognito IdToken in the Authorization header of the request.
# Our API's will check that IDToken with the specified Cognito User Pool and determine
# whether or not to send the request on to the lambda that will process the request.
# Users get a cookie in their local storage when they sign in with cognito we can use for
# all our API Calls to the backend.
  RecursiveThinkingAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      IdentitySource: "method.request.header.Authorization"
      Name: "RecursiveThinkingCognitoAuthorizer"
      ProviderARNs:
        - !GetAtt RecursiveThinkingUserPool.Arn
      RestApiId: !Ref RecursiveThinkingAPI
      Type: "COGNITO_USER_POOLS"

# AWS::Lambda::Permission = Lambda Functions need this to allow other AWS Services
# to invoke them.  In this case we specify API Gateway as the principal so that our
# functions can be invoked by our API.  We can have as many of these attached to a
# Lambda as we need things to invoke it.
# Action = IAM action ( in this case lambda:* ) meaning anything, we prob just need lambda:Invoke.
# FunctionName = Name of function to attach the permission to.
# Principal = The service that will have permission to invoke the function.
# ================================================================
# PERMISSION - GET - /developers/
# ================================================================
  RecursiveThinkingLambdaGetDevelopersPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetDevelopers
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /developers/{id}
# ================================================================
  RecursiveThinkingLambdaGetDeveloperByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetDeveloperById
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - POST - /developers/{id}
# ================================================================
  RecursiveThinkingLambdaPostDeveloperByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWPostDeveloperById
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /developers/{id}/edit
# ================================================================
  RecursiveThinkingLambdaGetDeveloperByIdEditPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetDeveloperByIdEdit
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - POST - /developers/{id}/edit
# ================================================================
  RecursiveThinkingLambdaPostDeveloperByIdEditPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWPostDeveloperByIdEdit
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /lessons/
# ================================================================
  RecursiveThinkingLambdaLessonsGetLessonsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetLessons
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /lessons/{id}
# ================================================================
  RecursiveThinkingLambdaLessonsGetLessonByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetLessonById
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - POST - /lessons/{id}
# ================================================================
  RecursiveThinkingLambdaLessonsPostLessonByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWPostLessonById
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /interviewQuestions/
# ================================================================
  RecursiveThinkingLambdaInterviewQuestionsGetPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetInterviewQuestions
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /interviewQuestions/{id}
# ================================================================
  RecursiveThinkingLambdaInterviewQuestionsGetInterviewQuestionByIDPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetInterviewQuestionById
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - POST - /interviewQuestions/{id}
# ================================================================
  RecursiveThinkingLambdaInterviewQuestionsPostInterviewQuestionByIDPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWPostInterviewQuestionById
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - GET - /interviewQuestions/{id}/edit
# ================================================================
  RecursiveThinkingLambdaInterviewQuestionsGetInterviewQuestionByIDEditPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWGetInterviewQuestionByIdEdit
      Principal: apigateway.amazonaws.com
# ================================================================
# PERMISSION - POST - /interviewQuestions/{id}/edit
# ================================================================
  RecursiveThinkingLambdaInterviewQuestionsPostInterviewQuestionByIDEditPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:*
      FunctionName: !Ref RTWPostInterviewQuestionByIdEdit
      Principal: apigateway.amazonaws.com


# AWS::Lambda::Function = Lambda functions! We point to the AssetS3Bucket and a zip file equal
# to the functions name, as our code source.  (This all gets created in our Python Script).
# Our functions need the DynamoDB Table name as an environment variable so we DependsOn that.
# The role defined here is a reference to an IAM role the function will assume, it gives
# the function power to do things with other AWS services (such as read/write to DynamoDB)

# ================================================================
# An error occurred (ValidationError) when calling the UpdateStack operation: Template error: instance of Fn::Sub references invalid resource attribute RTWPostLessonByIdEdit.Arn

# Usually this is a name Error in the Lambda

# ================================================================

# ================================================================
# LAMBDA - GET - /developers/
# ================================================================
  RTWGetDevelopers:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetDevelopers.zip"] ]
      Description: "Get RTW Developers"
      FunctionName: "RTWGetDevelopers"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingDeveloperProfiles
      Handler: index.GetDevelopers
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /developers/{id}
# ================================================================
  RTWGetDeveloperById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetDeveloperById.zip"] ]
      Description: "Get RTW Developer By Id"
      FunctionName: "RTWGetDeveloperById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingDeveloperProfiles
      Handler: index.GetDeveloperById
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# # ================================================================
# LAMBDA - POST - /developers/{id}
# ================================================================
  RTWPostDeveloperById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostDeveloperById.zip"] ]
      Description: "Post RTW Developer By Id"
      FunctionName: "RTWPostDeveloperById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingDeveloperProfiles
      Handler: index.PostDeveloperById
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /developers/{id}/edit
# ================================================================
  RTWGetDeveloperByIdEdit:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetDeveloperByIdEdit.zip"] ]
      Description: "Get RTW Developer By Id Edit"
      FunctionName: "RTWGetDeveloperByIdEdit"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingDeveloperProfiles
      Handler: index.GetDeveloperByIdEdit
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# # ================================================================
# LAMBDA - POST - /developers/{id}/edit
# ================================================================
  RTWPostDeveloperByIdEdit:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostDeveloperByIdEdit.zip"] ]
      Description: "Post RTW Developer By Id Edit"
      FunctionName: "RTWPostDeveloperByIdEdit"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingDeveloperProfiles
      Handler: index.PostDeveloperByIdEdit
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /lessons/
# ================================================================
  RTWGetLessons:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetLessons.zip"] ]
      Description: "Get RTW Lessons"
      FunctionName: "RTWGetLessons"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableLessons
      Handler: index.GetLessons
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /lessons/{id}
# ================================================================
  RTWGetLessonById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetLessonById.zip"] ]
      Description: "Get RTW Lesson By Id"
      FunctionName: "RTWGetLessonById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableLessons
      Handler: index.GetLessonById
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - POST - /lessons/{id}
# ================================================================
  RTWPostLessonById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostLessonById.zip"] ]
      Description: "Post RTW Lesson By Id"
      FunctionName: "RTWPostLessonById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableLessons
      Handler: index.PostLessonById
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /lessons/{id}/edit
# ================================================================
  RTWGetLessonByIdEdit:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetLessonByIdEdit.zip"] ]
      Description: "Get RTW Lesson By Id Edit"
      FunctionName: "RTWGetLessonByIdEdit"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableLessons
      Handler: index.GetLessonByIdEdit
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - POST - /lessons/{id}/edit
# ================================================================
  RTWPostLessonByIdEdit:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingDeveloperProfiles
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostLessonByIdEdit.zip"] ]
      Description: "Post RTW Lesson By Id Edit"
      FunctionName: "RTWPostLessonByIdEdit"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableLessons
      Handler: index.PostLessonByIdEdit
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /interviewQuestions/
# ================================================================
  RTWGetInterviewQuestions:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingTableInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetInterviewQuestions.zip"] ]
      Description: "Get RTW Interview Questions"
      FunctionName: "RTWGetInterviewQuestions"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableInterviewQuestions
      Handler: index.GetInterviewQuestions
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /interviewQuestions/{id}
# ================================================================
  RTWGetInterviewQuestionById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingTableInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetInterviewQuestionById.zip"] ]
      Description: "Get RTW Interview Question By Id"
      FunctionName: "RTWGetInterviewQuestionById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableInterviewQuestions
      Handler: index.GetInterviewQuestionById
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - POST - /interviewQuestions/{id}
# ================================================================
  RTWPostInterviewQuestionById:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingTableInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostInterviewQuestionById.zip"] ]
      Description: "Post RTW Interview Question By Id"
      FunctionName: "RTWPostInterviewQuestionById"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableInterviewQuestions
      Handler: index.PostInterviewQuestionById
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - GET - /interviewQuestions/{id}/edit
# ================================================================
  RTWGetInterviewQuestionByIdEdit:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingTableInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/GetInterviewQuestionByIdEdit.zip"] ]
      Description: "Get RTW Interview Question By Id Edit"
      FunctionName: "RTWGetInterviewQuestionByIdEdit"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableInterviewQuestions
      Handler: index.GetInterviewQuestionByIdEdit
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60
# ================================================================
# LAMBDA - POST - /interviewQuestions/{id}/edit
# ================================================================
  RTWPostInterviewQuestionByIdEdit:
    Type: "AWS::Lambda::Function"
    DependsOn: RecursiveThinkingTableInterviewQuestions
    Properties:
      Code:
        S3Bucket: !Ref AssetS3Bucket
        S3Key: !Join [ "", [ !Ref LambdaFolder, "/PostInterviewQuestionByIdEdit.zip"] ]
      Description: "Post RTW Interview Question By Id Edit"
      FunctionName: "RTWPostInterviewQuestionByIdEdit"
      Environment:
        Variables:
          TABLE: !Ref RecursiveThinkingTableInterviewQuestions
      Handler: index.PostInterviewQuestionByIdEdit
      MemorySize: 128
      Role: !GetAtt RecursiveThinkingLambdaRole.Arn
      Runtime: nodejs8.10
      Timeout: 60

# AWS::DynamoDB::Table = DynamoDB tables.  They must specify at least one primary key.  The primary
# key has to be unique across all records in the table, so we specify type HASH.
# ================================================================
# DYNAMODB - /developers/
# ================================================================
  RecursiveThinkingDeveloperProfiles:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Username"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingDeveloperProfiles"
# ================================================================
# DYNAMODB - /lessons/
# ================================================================
  RecursiveThinkingTableLessons:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingTableLessons"
# ================================================================
# DYNAMODB - /interviewQuestions/
# ================================================================
  RecursiveThinkingTableInterviewQuestions:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecursiveThinkingTableInterviewQuestions"
# ================================================================
# DYNAMODB - /interviewQuestions/{id}/answers/
# ================================================================
  # RecursiveThinkingTableInterviewQuestionsAnswers:
  #   Type: "AWS::DynamoDB::Table"
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: "Id"
  #         AttributeType: "S"
  #     KeySchema:
  #       - AttributeName: "Id"
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 1
  #       WriteCapacityUnits: 1
  #     TableName: "RecursiveThinkingTableInterviewQuestionsAnswers"

# These are our outputs to show after running our python script.  We can paste the
# cognito clientId and cognitoUserPoolId in main.js of our webapp to connect to that
# specific resource with AWS Amplify library (our auth).  We can use the API Gateway ID
# as the base of the URL that we make all our api calls to.
# This allows us to set these values when we want to test on one 'stack' or
# instance of the architecture in this template.  We will have a 'beta' stack
# and a 'prod' stack.  Allows us to change these values in the webapp when we want to
# test things out and not break the 'prod' stack.  Which stack gets built and what is
# output is specified by passing the --stage beta or --stage '' to our Python script.
# for now just dont pass --stage because stuffs not in production yet.
Outputs:

  CognitoUserPoolId:
    Description: The cognito user pool id
    Value: !Ref RecursiveThinkingUserPool
    Export:
      Name: CognitoUserPoolIdentifier

  APIGatewayId:
    Description: The base id of the api, used for constructing the api url to make requests
    Value: !Ref RecursiveThinkingAPI
    Export:
      Name: APIGatewayIdentifier

  CognitoClientId:
    Description: The id of the client (app) connected to cognito
    Value: !Ref RecursiveThinkingUserPoolClient
    Export:
      Name: CognitoUserPoolClientIdentifier

